#!/usr/bin/env bash
#
# Flash Kernel compilation script
#
# Copyright (C) 2016-2018 Nathan Chancellor
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>


###############
#             #
#  FUNCTIONS  #
#             #
###############


# Gather parameters
function parse_parameters() {
    # Unset the universal OS variable for this script only
    unset OS
    PARAMS="$*"
    while [[ $# -ge 1 ]]; do
        case ${1} in
            # AnyKernel2 branch
            "-ak2-b"|"--anykernel2-branch")
                shift && enforce_value "$@"

                ANYKERNEL2_BRANCH=${1} ;;

            # Android version
            "-av"|"--android-version")
                shift && enforce_value "$@"

                ANDROID_VERSION=${1} ;;

            # Branch to compile
            "-b"|"--branch")
                shift && enforce_value "$@"

                KERNEL_BRANCH=${1} ;;

            # Config to use for compiling
            "-c"|"--config")
                shift && enforce_value "$@"

                DEFCONFIG=${1} ;;

            # Compiler to use
            "-cc"|"--compiler")
                shift && enforce_value "$@"

                COMPILER=${1} ;;

            # Clang toolchain to use for compiling
            "-ct"|"--clang-toolchain")
                shift && enforce_value "$@"

                CLANG_FOLDER=${1} ;;

            # Device to compile for
            "-d"|"--device")
                shift && enforce_value "$@"

                DEVICE=${1} ;;

            # Extra make flags if necessary (like mismatch config)
            "-f"|"--flags")
                shift && enforce_value "$@"

                EXTRA_MAKE_FLAGS=${1} ;;

            # 64-bit GCC toolchain to use for compiling
            "-gt"|"--gcc-toolchain")
                shift && enforce_value "$@"

                GCC_FOLDER=${1} ;;

            # 32-bit GCC toolchain to use for compiling
            "-gt-32"|"--gcc-32-bit-toolchain")
                shift && enforce_value "$@"

                GCC_32_BIT_FOLDER=${1} ;;

            # Do not package kernel image
            "-io"|"--image-only")
                IMAGE_ONLY=true ;;

            # Where to move zip after compilation
            "-m"|"--mode")
                shift && enforce_value "$@"

                MODE=${1} ;;

            # Don't move/delete zips in FILE_MOVE folder
            "-n"|"--no-clean")
                NOCLEAN=true ;;

            # (OnePlus 5/T only) build only OxygenOS or custom ROM kernel image
            "-os"|"--operating-system")
                shift && enforce_value "$@"

                OS_LIST=${1} ;;

            # How to package kernel (zip or boot image)
            "-p"|"--package-method")
                shift && enforce_value "$@"

                PACKAGE_METHOD=${1} ;;

            # Test versioning (# in kernel version)
            "-r"|"--revision")
                shift && enforce_value "$@"

                REVISION=${1} ;;

            # Send updates to Telegram
            "-t"|"--telegram")
                TG=true
                TG_MSG_FILE=/tmp/tg-msg.1 ;;

            # Version number
            "-v"|"--version")
                shift && enforce_value "$@"

                VERSION=${1} ;;

            # How much script output to show
            "-V"|"--verbosity-level")
                shift && enforce_value "$@"
                VERBOSITY_LEVEL=${1}
                case ${VERBOSITY_LEVEL} in
                    "1") SHOW_OUTPUT=true; HIDDEN_COMMANDS=true ;;
                    "2") SHOW_OUTPUT=true; VERBOSE_COMMANDS=true ;;
                    "3") EXTRA_MAKE_FLAGS="${EXTRA_MAKE_FLAGS} V=1"; SHOW_OUTPUT=true; HIDDEN_COMMANDS=true ;;
                    "4") EXTRA_MAKE_FLAGS="${EXTRA_MAKE_FLAGS} V=1"; SHOW_OUTPUT=true; VERBOSE_COMMANDS=true ;;
                esac ;;

            *)
                die "Invalid parameter" ;;
        esac

        shift
    done

    # Default parameters
    [[ -z ${DEVICE} ]] && DEVICE="taimen"
    [[ -z ${MODE} ]] && MODE="personal"
    [[ -z ${VERBOSITY_LEVEL} ]] && HIDDEN_COMMANDS=true

    # Easy to use variables for if statements
    [[ ${MODE} != "stable" ]] && NOT_STABLE=true

    if [[ ${TG} ]]; then
        {
            echo "\`\`\`"
            echo "Currently executing..."
            echo
            echo "$(basename "${0}") ${PARAMS}"
            echo "\`\`\`"
        } > ${TG_MSG_FILE}
        notify "$(cat ${TG_MSG_FILE})"
    fi
}


# 'cp -v' alias
function cp() {
    command cp ${VERBOSE_COMMANDS:+ "-v"} "$@"
}


# 'mv -v' alias
function mv() {
    command mv ${VERBOSE_COMMANDS:+ "-v"} "$@"
}


# 'rm -v' alias
function rm() {
    command rm ${VERBOSE_COMMANDS:+ "-v"} "$@"
}


# Device "board" flagsi
function device_flags() {
    case ${DEVICE} in
        "op5")
            # Required flags
            [[ -z ${ANDROID_VERSION} ]] && ANDROID_VERSION=8.x

            AK2_SFX=${ANDROID_VERSION}

            BUILD_FUNCTION=build_kernel_op5

            [[ -z ${COMPILER} ]] && COMPILER=clang

            if [[ -z ${CLANG_FOLDER} ]]; then
                case ${MODE} in
                    "personal") CLANG_FOLDER=/opt/clang-7.x ;;
                    *) VAR=$(ls -dt -- /opt/aosp-clang/*/ | head -n1); CLANG_FOLDER=${VAR::-1} ;;
                esac
            fi

            DEVICE_NAME_FILE=${DEVICE^^}
            DEVICE_NAME_GITHUB=${DEVICE}
            DEVICE_NAME_WEB=${DEVICE}

            if [[ -z ${GCC_FOLDER} ]]; then
            case ${MODE} in
                "personal") GCC_FOLDER="/opt/linaro-gcc" ;;
                *) GCC_FOLDER="/opt/aosp-gcc" ;;
            esac
                PREBUILT_MOD=false
            fi

            MATCH_FLAG="${DEVICE_NAME_FILE}-v${VERSION::1}"

            PACKAGE_METHOD=zip ;;

        "taimen"|"walleye")
            # Required flags
            [[ -z ${ANDROID_VERSION} ]] && ANDROID_VERSION=8.1.0
            AK2_SFX=${ANDROID_VERSION}

            BUILD_FUNCTION=build_kernel

            [[ -z ${COMPILER} ]] && COMPILER=clang

            if [[ -z ${CLANG_FOLDER} ]]; then
                case ${MODE} in
                    "personal") CLANG_FOLDER=/opt/clang-7.x ;;
                    *) CLANG_FOLDER=/opt/clang-7.x ;;
                esac
            fi

            [[ -z ${DEFCONFIG} ]] && DEFCONFIG="flash-${DEVICE}_defconfig"

            DEVICE_NAME_FILE=${DEVICE^}
            DEVICE_NAME_GITHUB=wahoo
            DEVICE_NAME_WEB=${DEVICE}

            [[ -z ${GCC_FOLDER} ]] && GCC_FOLDER="/opt/linaro-gcc"
            [[ -z ${GCC_32_BIT_FOLDER} ]] && GCC_32_BIT_FOLDER="/opt/linaro-gcc-32"

            MATCH_FLAG="${DEVICE_NAME_FILE}-v${VERSION::1}"

            if [[ -z ${PACKAGE_METHOD} ]]; then
                case ${MODE} in
                    "personal") PACKAGE_METHOD=zip ;;
                    *) PACKAGE_METHOD=image_zip ;;
                esac
            fi ;;

        *)
            die "Invalid device!" ;;
    esac
}


# Set up other variables
function generate_variables() {
    # Folders
    SOURCE_FOLDER=${KERNEL_FOLDER}/flash/${DEVICE_NAME_GITHUB}
    OUT_FOLDER=/media/kernel/flash/out-${DEFCONFIG%_defconfig}
    ANYKERNEL2_FOLDER=${KERNEL_FOLDER}/flash/anykernel2-${DEVICE_NAME_GITHUB}
    FILE_MOVE_HEAD=${WEB_FOLDER}/downloads

    case ${MODE} in
        "alpha"|"beta"|"bisect"|"rc"|"stable")
            FILE_MOVE=${FILE_MOVE_HEAD}/kernels/${DEVICE_NAME_WEB}/${ANDROID_VERSION}/${MODE}
            FILE_MOVE_OLD=$(readlink -f "${FILE_MOVE}/../archive")
            if [[ ${TG} ]]; then
                case ${DEVICE} in
                    "op5") export CHAT_ID=-1001107088684 ;;
                    "taimen"|"walleye") export CHAT_ID=-1001298464571 ;;
                esac
            fi ;;
        "tmp")
            FILE_MOVE=${FILE_MOVE_HEAD}/../tmp/${DEVICE_NAME_WEB}/${ANDROID_VERSION} ;;
        "personal")
            FILE_MOVE=${FILE_MOVE_HEAD}/../me/fk/${DEVICE_NAME_WEB} ;;
        *)
            die "Invalid mode specified!" ;;
    esac

    # Compilation variables
    ARCHITECTURE=arm64
    export CCACHE_DIR="/media/kernel/.ccache-${DEFCONFIG%_defconfig}"

    # Normal 64-bit GCC toolchain
    GCC=$(find ${GCC_FOLDER}/bin \( -type f -o -type l \) -name 'aarch64-*-gcc' | head -n1)
    [[ -z ${GCC} ]] && die "64-bit GCC toolchain could not be found!"
    CC=${GCC%gcc}

    # 32-bit GCC toolchain if required
    if [[ -n ${GCC_32_BIT_FOLDER} ]]; then
        GCC_32_BIT=$(find ${GCC_32_BIT_FOLDER}/bin \( -type f -o -type l \) -name '*-gcc' | head -n1)
        [[ -z ${GCC_32_BIT} ]] && die "32-bit GCC toolchain could not be found!"
        CC_32_BIT=${GCC_32_BIT%gcc}
    fi

    # Handle Clang
    if [[ ${COMPILER} = "clang" ]]; then
        CLANG=${CLANG_FOLDER}/bin/clang
        [[ ! -f ${CLANG} ]] && die "Clang toolchain could not be found!"

        case "$(basename ${CLANG_FOLDER})" in
            "clang-3289846"|"clang-4053586")
                CLANG_LD_PATH=${CLANG_FOLDER}/lib64
                CLANG_VERSION=$(${CLANG} --version | head -n 1) ;;
            "clang-4679922"|"clang-4691093")
                CLANG_LD_PATH=${CLANG_FOLDER}/lib64
                CLANG_VERSION=$(${CLANG} --version | head -n 1 | cut -d ' ' -f 1,6,7,8,13,14,15,16) ;;
            *)
                CLANG_LD_PATH=${CLANG_FOLDER}/lib
                CLANG_VERSION=$(${CLANG} --version | head -n 1 | cut -d'(' -f1 )
                if [[ ${MODE} = "personal" ]]; then
                    SCRIPT_OPT_FLAGS="-mllvm -polly \
                                      -mllvm -polly-run-dce \
                                      -mllvm -polly-run-inliner \
                                      -mllvm -polly-opt-fusion=max \
                                      -mllvm -polly-ast-use-context \
                                      -mllvm -polly-vectorizer=stripmine \
                                      -mllvm -polly-detect-keep-going"
                    [[ ${DEVICE} = "op5" ]] && SCRIPT_OPT_FLAGS="${SCRIPT_OPT_FLAGS} -fsanitize=local-init"
                fi ;;
        esac
        # shellcheck disable=SC2001
        CLANG_VERSION="$(echo "${CLANG_VERSION}" | sed 's/[[:space:]]*$//')"

        LLVM_DIS=${CLANG_FOLDER}/bin/llvm-dis
    fi
}


# Clean up
function clean_up() {
    # Clean AnyKernel2 folder
    cd "${ANYKERNEL2_FOLDER}" || die "AnyKernel2 source is missing!"

    [[ -z ${ANYKERNEL2_BRANCH} ]] && ANYKERNEL2_BRANCH=${DEVICE_NAME_GITHUB}-flash-${AK2_SFX}

    git checkout ${HIDDEN_COMMANDS:+ "-q"} ${ANYKERNEL2_BRANCH}
    git clean -fxd ${HIDDEN_COMMANDS:+ "-q"}

    # Only checkout if kernel_branch exists and we aren't bisecting or rebasing
    cd "${SOURCE_FOLDER}" || die "Kernel source is missing!"
    if [[ -n ${KERNEL_BRANCH} ]]; then
        [[ ! $(git status | ag "bisec|rebas") ]] && git checkout ${HIDDEN_COMMANDS:+ "-q"} "${KERNEL_BRANCH}"
    # Otherwise, notate current branch for changelog
    else
        KERNEL_BRANCH=$(git rev-parse --abbrev-ref HEAD)
    fi
    [[ -z ${HIDDEN_COMMANDS} ]] && echo
}


# Make wrapper for make function for GCC
function make_wrapper_gcc() {
    make "${JOBS_FLAG}" \
         ARCH=${ARCHITECTURE} \
         CROSS_COMPILE="${CCACHE} ${CC}" \
         KBUILD_BUILD_VERSION="${KBUILD_BUILD_VERSION}" \
         LOCALVERSION="${LOCALVERSION}" \
         O="${OUT_FOLDER}" \
         "$@"
}


# Make wrapper for make function for Clang
function make_wrapper_clang() {
    LD_LIBRARY_PATH="${CLANG_LD_PATH}:${LD_LIBARY_PATH}" \
    PATH=${BIN_FOLDER}:${PATH} make "${JOBS_FLAG}" \
                                    ARCH=${ARCHITECTURE} \
                                    CC="${CCACHE} ${CLANG}" \
                                    CLANG_TRIPLE=aarch64-linux-gnu- \
                                    CROSS_COMPILE="${CC}" \
                                    CROSS_COMPILE_ARM32="${CC_32_BIT}" \
                                    HOSTCC="${CCACHE} ${CLANG}" \
                                    KBUILD_COMPILER_STRING="${CLANG_VERSION}" \
                                    KBUILD_BUILD_VERSION="${KBUILD_BUILD_VERSION}" \
                                    LLVM_DIS="${LLVM_DIS}" \
                                    LOCALVERSION="${LOCALVERSION}" \
                                    O="${OUT_FOLDER}" \
                                    SCRIPT_OPT_FLAGS="${SCRIPT_OPT_FLAGS}" \
                                    "$@"
}


# Silence output function
function kmake() {
    # Only show errors and warnings when compiling (unless debug)
    if [[ ${SHOW_OUTPUT} ]]; then
        make_wrapper_${COMPILER} "$@"
    else
        make_wrapper_${COMPILER} "$@" |& ag --no-color --after=10 "error:|warning:" && echo
    fi
}


# Setup compilation
function generate_version() {
    # Generate kernel version
    KVER=$(make ${EXTRA_MAKE_FLAGS} kernelversion)

    # This is set in the defconfig
    CONFIG_LOCALVERSION="-FlashKernel"

    # If the mode is not personal, add the device name to LOCALVERSION
    if [[ ${MODE} != "personal" ]]; then
        LOCALVERSION="-${DEVICE_NAME_FILE}"
        LOCALVERSION_ZIP="${LOCALVERSION}"
    fi

    # Add version if present
    if [[ -n ${VERSION} ]]; then
        VERSION_TEXT="-v${VERSION}"
        LOCALVERSION="${LOCALVERSION}${VERSION_TEXT}"
    fi

    # If the mode isn't stable, add hash information to the file for debugging
    if [[ ${NOT_STABLE} ]]; then
        # Furthermore, if it is a personal build, use a shorter hash length
        [[ ${MODE} = "personal" ]] && NUM=8 || NUM=12
        SHA="-g$(git rev-parse --verify --short=${NUM} HEAD)"
        LOCALVERSION="${LOCALVERSION}${SHA}"

        # Don't add the hash to the zip name for personal builds, use the date instead
        if [[ ${MODE} = "personal" ]]; then
            unset SHA
            DATE="-$(date +%Y%m%d-%H%M)"
        fi
    fi

    # If there are uncommitted changes, mark as dirty
    if [[ $( git diff-index --name-only HEAD ) ]]; then
        DIRTY="-dirty"
        LOCALVERSION="${LOCALVERSION}${DIRTY}"
    fi

    # If EXTRAVERSION is present in EXTRA_MAKE_FLAGS
    if [[ ${EXTRA_MAKE_FLAGS} = *"EXTRAVERSION"* ]];then
        LOCALVERSION_BASELINE=$(echo ${EXTRA_MAKE_FLAGS} | sed -r 's/[[:alnum:]]+=/\n&/g' | awk -F= '$1=="EXTRAVERSION"{print $2}')
        LOCALVERSION_BASELINE=${LOCALVERSION_BASELINE#"-"}-${DEVICE_NAME_FILE}
        LOCALVERSION=
    fi

    # Generate first line variable
    # CONFIG_LOCALVERSION_AUTO is disabled
    FIRST_LINE="${KVER}${CONFIG_LOCALVERSION}${LOCALVERSION}"

    # If REVISION exists, use it for the file
    if [[ -n ${REVISION} ]]; then
        REVISION_FOR_FILE=".${MODE::1}${REVISION}"

        # If REVISION is greater than or equal to 1, pass it to the build system
        [[ ${REVISION} -ge 1 ]] && KBUILD_BUILD_VERSION=${REVISION}
    fi

    # Generate second line variable
    SECOND_LINE="$(whoami)@$(uname -n) #${KBUILD_BUILD_VERSION:-1}"

    # Generate third line variable
    THIRD_LINE="$(date)"

    # Export KERNEL_NAME based on the above information
    KERNEL_NAME="${CONFIG_LOCALVERSION/-/}${LOCALVERSION_ZIP}${VERSION_TEXT}${REVISION_FOR_FILE}${SHA}${DATE}"

    # Set final package names
    if [[ ${PACKAGE_METHOD} =~ "image" ]]; then
        BOOT_IMAGE=${KERNEL_NAME}-boot.img
        DTBO_IMAGE=${KERNEL_NAME}-dtbo.img
    fi

    if [[ ${PACKAGE_METHOD} =~ "zip" ]]; then
        UNSIGNED_ZIP=${KERNEL_NAME}-unsigned.zip
        SIGNED_ZIP=${KERNEL_NAME}.zip
    fi
}


# Print variables
function print_variables() {
    echo "${BOLD}Kernel version:${RST}    ${FIRST_LINE}"
    echo "                   ${SECOND_LINE}"
    echo "                   ${THIRD_LINE}\n"

    echo "${BOLD}Kernel branch:${RST}     ${KERNEL_BRANCH}\n"

    if [[ ${COMPILER} = "clang" ]]; then
        echo "${BOLD}Clang info:${RST}        ${CLANG_VERSION}"
        echo "                   ${CLANG}\n"
    fi

    echo "${BOLD}GCC info:${RST}          $(${GCC} --version | head -1)"
    echo "                   ${GCC}\n"
}


# Build kernel image
function build_kernel() {
    # Clean source folder
    git clean -dfx ${HIDDEN_COMMANDS:+ "-q"}

    # Point to proper defconfig and generate version files
    kmake ${EXTRA_MAKE_FLAGS} ${DEFCONFIG} prepare

    # Notify Telegram of build starting
    if [[ ${TG} && ${ALREADY_NOTIFIED} != true ]]; then
        {
            echo "\`\`\`"
            echo "Kernel build starting..."
            if [[ ${MODE} = "personal" ]]; then
                echo
                echo "Device: ${DEVICE_NAME_FILE}"
            fi
            echo
            echo "Version: $(cat "${OUT_FOLDER}/include/config/kernel.release")"
            if [[ ${PACKAGE_METHOD} =~ "zip" ]]; then
                echo
                echo "Zip file: ${SIGNED_ZIP}"
            fi
            if [[ ${PACKAGE_METHOD} =~ "image" ]]; then
                echo
                echo "Boot image: ${BOOT_IMAGE}"
            fi
            SHORT_CHANGELOG=/tmp/${DEVICE_NAME_FILE,,}-${VERSION/./}
            if [[ -f ${SHORT_CHANGELOG} ]]; then
                echo
                echo "Short changelog:"
                cat "${SHORT_CHANGELOG}"
            fi
            echo "\`\`\`"
        } > ${TG_MSG_FILE}
        notify "$(cat ${TG_MSG_FILE})"
    fi

    # Make the kernel
    # shellcheck disable=SC2086
    kmake ${EXTRA_MAKE_FLAGS}

    # Find the compiled files
    OUT_KERNEL_IMAGE=$(find "${OUT_FOLDER}/arch/${ARCHITECTURE}" -name 'Image.*-dtb' 2>/dev/null)
    OUT_DTBO_IMAGE=$(find "${OUT_FOLDER}/arch/${ARCHITECTURE}" -name 'dtbo.img' 2>/dev/null)

    # Move them if they exist, error out if not
    if [[ -n ${OUT_KERNEL_IMAGE} ]]; then
        echo "${GRN}${OS_STRING}$(basename "${OUT_KERNEL_IMAGE}") compiled successfully!${RST}\n"
        move_kernel_files
    else
        echo "${RED}Kernel image not found!${RST}\n"
        ending_info
    fi
}


# Move kernel files after compilation
function move_kernel_files() {
    if [[ ! ${IMAGE_ONLY} ]]; then
        # Move the kernel image
        mkdir -p "${ANYKERNEL2_FOLDER}${ANYKERNEL2_SUB_FOLDER}"
        cp "${OUT_KERNEL_IMAGE}" "${ANYKERNEL2_FOLDER}${ANYKERNEL2_SUB_FOLDER}"
        [[ -n ${OUT_DTBO_IMAGE} ]] && cp "${OUT_DTBO_IMAGE}" "${ANYKERNEL2_FOLDER}/dtbo"
        echo "Version: $(cat "${OUT_FOLDER}/include/config/kernel.release")" > "${ANYKERNEL2_FOLDER}/version"

        # Grab modules too if they are present
        MODULES="$(find "${OUT_FOLDER}" -name '*.ko')"
        if [[ -n ${MODULES} ]]; then
            MODULES_FOLDER=${ANYKERNEL2_FOLDER}/ramdisk/modules
            mkdir -p "${MODULES_FOLDER}"
            if [ ! -z ${PREBUILT_MOD} ] && [ "${PREBUILT_MOD}" == "true" ]; then
                #cp -R "${HOME}/modules/"* "${MODULES_FOLDER}"
                if [ -f "${HOME}/modules/qca_cld3_wlan.ko" ]; then
                    cp ${HOME}/modules/qca_cld3_wlan.ko ${OUT_FOLDER}/drivers/staging/qcacld-3.0/wlan.ko
                fi
                if [ -f "${HOME}/modules/msm_11ad_proxy.ko" ]; then
                    cp ${HOME}/modules/msm_11ad_proxy.ko ${OUT_FOLDER}/drivers/platform/msm/msm_11ad/msm_11ad_proxy.ko
                fi
                if [ -f "${HOME}/modules/wil6210.ko" ]; then
                    cp ${HOME}/modules/wil6210.ko ${OUT_FOLDER}/drivers/net/wireless/ath/wil6210/wil6210.ko
                fi
            fi
            for MOD in ${MODULES}; do
                if [ ! -z ${PREBUILT_MOD} ] && [ "${PREBUILT_MOD}" == "true" ]; then
                    "${CC}"strip --strip-debug "${MOD}"
                else
                    "${CC}"strip --strip-unneeded "${MOD}"
                fi
                if [ -f ${OUT_FOLDER}/scripts/sign-file ]; then
                "${OUT_FOLDER}"/scripts/sign-file sha512 \
                                                  "${OUT_FOLDER}/certs/signing_key.pem" \
                                                  "${OUT_FOLDER}/certs/signing_key.x509" \
                                                  "${MOD}"
                fi
                cp "${MOD}" "${MODULES_FOLDER}"
            done
        fi
    fi
}


# Build function specifically for the OnePlus 5
function build_kernel_op5() {
    [[ -z ${OS_LIST} ]] && OS_LIST="OOS Custom"

    for OS in ${OS_LIST}; do
        ANYKERNEL2_SUB_FOLDER="/kernels/${OS,,}"
        if [[ -z ${DEFCONFIG} ]]; then
            DEFCONFIG="flash-${OS,,}_defconfig"
        fi
        OS_STRING="${OS} "
        build_kernel
        ALREADY_NOTIFIED=true
    done
}


# Package zip
function package_zip() {
    header "PACKAGING AND SIGNING ZIP"

    echo "${BOLD}Signed zip name:${RST}   ${SIGNED_ZIP}\n"
    [[ -n ${MODULES_FOLDER} ]] && \
        echo "${BOLD}Kernel modules:${RST}    $(find "${MODULES_FOLDER}" -type f | wc -l)\n"

    cd "${ANYKERNEL2_FOLDER}" || die "AnyKernel2 folder shift failed!"

    # Package the zip without the README
    zip ${HIDDEN_COMMANDS:+ "-q"} -r9 "${UNSIGNED_ZIP}" -x README.md -- *

    # Sign zip
    java -jar "${BIN_FOLDER}/zipsigner-2.1.jar" \
              "${UNSIGNED_ZIP}" \
              "${SIGNED_ZIP}"

    # If packaging failed, error out
    if [[ ! -f ${SIGNED_ZIP} ]]; then
        echo "${RED}Kernel zip not found after signing!${RST}\n"
        ending_info
    else
        echo "${GRN}Kernel zip successfully generated!${RST}\n"
    fi
}


# Silence output function for package_image
function package_image() {
    AOSP_FOLDER=${KERNEL_FOLDER}/sources/aosp-pixel2
    cd "${AOSP_FOLDER}" || die "AOSP source is not synced!"

    git -C device/google/wahoo-kernel reset --hard ${HIDDEN_COMMANDS:+ "--quiet"}

    cp "${OUT_KERNEL_IMAGE}" "${AOSP_FOLDER}/device/google/wahoo-kernel"
    cp "${OUT_DTBO_IMAGE}" "${AOSP_FOLDER}/device/google/wahoo-kernel"

    header "COMPILING BOOT IMAGE"

    echo "${BOLD}Image name:${RST}        ${BOOT_IMAGE}\n"

    echo "${BOLD}Current tag:${RST}       $(git -C device/google/wahoo describe --tags HEAD)\n"

    package_image_wrapper

    COMPILED_BOOT_IMAGE=${AOSP_FOLDER}/out/target/product/${DEVICE_NAME_WEB}/boot.img

    if [[ ! -f ${COMPILED_BOOT_IMAGE} ]]; then
        echo "${RED}Boot image not found!${RST}\n" && ending_info
    else
        echo "${GRN}Boot image compiled successfully!${RST}\n"
    fi
}


# Package image wrapper
function package_image_wrapper() {
    # Only show errors when compiling (unless debug)
    if [[ ${SHOW_OUTPUT} ]]; then
        package_image_commands
    else
        package_image_commands |& ag --no-color "error:" && echo
    fi
}


# Package image commands
function package_image_commands() {
    mkavenv
    . build/envsetup.sh
    lunch aosp_${DEVICE_NAME_WEB}-user
    make "${JOBS_FLAG}" clean
    make "${JOBS_FLAG}" bootimage
    rmvenv
}


# Package both an image and zip
function package_image_zip() {
    package_zip
    package_image
}


# Setup folders
function setup_folders() {
    echo "  - Setting up final folders"

    # If FILE_MOVE doesn't exist, make it
    [[ ! -d ${FILE_MOVE} ]] && mkdir -p "${FILE_MOVE}"
    FILE_MOVE=$(readlink -f "${FILE_MOVE}")

    # If it isn't a stable build, clean the folder
    if [[ ${NOT_STABLE} ]]; then
        if [[ ! ${NOCLEAN} ]]; then
            if [[ ${MODE} = "personal" ]]; then
                rm -rf "${FILE_MOVE:?}"/*
            else
                rm -rf "${FILE_MOVE:?}"/*"${MATCH_FLAG}"*
            fi
        fi
    else
        # Clean old test builds
        cd "${FILE_MOVE}/.." || die "Shift to zip folder failed!"
        rm -rf {alpha,beta,rc,tmp}/*
        #git add .
        #if [[ -n $(git status --porcelain) ]]; then
        #    git commit --gpg-sign ${HIDDEN_COMMANDS:+ "--quiet"} --signoff --message "${DEVICE_NAME_FILE}: Remove old test builds"
        #    git push ${HIDDEN_COMMANDS:+ "--quiet"}
        #fi

        # Move the old files to an archive folder unless no clean is requested
        if [[ ! ${NOCLEAN} ]]; then
            [[ ! -d ${FILE_MOVE_OLD} ]] && mkdir -p "${FILE_MOVE_OLD}"
            OLD_FILES="$(find "${FILE_MOVE}" -maxdepth 1 -type f -name "*${MATCH_FLAG}*" 2>/dev/null)"
            if [[ -n ${OLD_FILES} ]]; then
                for OLD_FILE in ${OLD_FILES}; do
                    mv ${VERBOSE_COMMANDS:+ "-v"} "${OLD_FILE}" "${FILE_MOVE_OLD}"
                done
            fi
        fi
    fi
}


# Move files and generate md5 files
function move_flashable_files() {
    echo "  - Moving files"

    (
        cd "${FILE_MOVE}" || die "Shift to ending folder failed!"
        if [[ ${PACKAGE_METHOD} =~ "image" ]]; then
            mv "${COMPILED_BOOT_IMAGE}" "${FILE_MOVE}/${BOOT_IMAGE}"
            md5sum "${BOOT_IMAGE}" > "${FILE_MOVE}/${BOOT_IMAGE}.md5"

            mv "$(dirname "${OUT_KERNEL_IMAGE}")/dtbo.img" "${FILE_MOVE}/${DTBO_IMAGE}"
            md5sum "${DTBO_IMAGE}" > "${FILE_MOVE}/${DTBO_IMAGE}.md5"
        fi

        if [[ ${PACKAGE_METHOD} =~ "zip" ]]; then
            mv "${ANYKERNEL2_FOLDER}/${SIGNED_ZIP}" "${FILE_MOVE}"
            md5sum "${SIGNED_ZIP}" > "${FILE_MOVE}/${SIGNED_ZIP}.md5"
        fi
    )
}


# Generate changelog
function generate_changelog() {
    echo "  - Generating changelog"

    GITHUB="http://github.com/nathanchance"
    CHANGELOG=${FILE_MOVE}/${KERNEL_NAME}-changelog.txt

    # Kernel source first
    cd "${SOURCE_FOLDER}" || die "Kernel source is missing!"

    # We need to mark the previous tag for changelog
    PREV_TAG_NAME=$(git tag --sort=-taggerdate -l "*${MATCH_FLAG}*" | head -n 1)
    [[ -z ${PREV_TAG_NAME} ]] && return
    RANGE=${PREV_TAG_NAME}..HEAD

    # Show where commits are located
    {
        echo "${GITHUB}/${DEVICE_NAME_GITHUB}/commits/${KERNEL_BRANCH}\n"

        # Use shortlog for pretty output
        git log "${RANGE}" | git shortlog

        # Generate a diff as well
        git diff --find-renames --stat --summary "${RANGE}"
    } > "${CHANGELOG}"

    if [[ ${PACKAGE_METHOD} =~ "zip" ]]; then
        # AnyKernel2 next
        cd "${ANYKERNEL2_FOLDER}" || die "AnyKernel2 source is missing!"

        # We only want to show AnyKernel2 changes if there have been some
        NUM_COMMITS=$(git log "${RANGE}" --pretty=oneline | wc -l)

        if [[ ${NUM_COMMITS} -gt 0 ]]; then
            {
                echo "\n\n${GITHUB}/AnyKernel2/commits/${ANYKERNEL2_BRANCH}\n"
    
                git log "${RANGE}" | git shortlog

                git diff --find-renames --stat --summary "${RANGE}"
            } >> "${CHANGELOG}"
        fi
    fi
}


#Ppush kernel files (zips/images) to GitHub
function push_flashable_files() {
    echo "  - Pushing files to GitHub"

    cd "${FILE_MOVE}" || die "Zip folder doesn't exist!"

    git add ..

    git commit --gpg-sign ${HIDDEN_COMMANDS:+ "--quiet"} --signoff --message "${KERNEL_NAME}"

    git push ${HIDDEN_COMMANDS:+ "--quiet"}
}


# Tag for stable releases
function tag_stable() {
    echo "  - Tagging ${KERNEL_NAME} as stable"

    cd "${SOURCE_FOLDER}" || die "Kernel source is missing!"

    git tag --sign --annotate "${KERNEL_NAME}" --message "${KERNEL_NAME}"
    git push ${HIDDEN_COMMANDS:+ "--quiet"} origin "${KERNEL_NAME}"

    if [[ ${PACKAGE_METHOD} =~ "zip" ]]; then
        cd "${ANYKERNEL2_FOLDER}" || die "AnyKernel2 source is missing!"

        git tag --sign --annotate "${KERNEL_NAME}" --message "${KERNEL_NAME}"
        git push ${HIDDEN_COMMANDS:+ "--quiet"} origin "${KERNEL_NAME}"
    fi
}


# After build tasks
function after_build_tasks () {
    if [[ ! ${IMAGE_ONLY} ]]; then
        package_${PACKAGE_METHOD}

        header "SHUFFLING FILES"

        setup_folders
        move_flashable_files

        #if [[ ${MODE} != "personal" ]]; then
        #    generate_changelog
        #    [[ ${MODE} != "tmp" ]] && push_flashable_files
        #    [[ ! ${NOT_STABLE} ]] && tag_stable
        #fi

        echo
    fi
}


# Print file info
function ending_info() {
    header "SCRIPT FINISHED!"

    END=$(date +"%s")
    LOG=$HOME/script.log
    DURATION=$(format_time "${START}" "${END}")

    echo "\n$(date +"%m/%d/%Y %H:%M:%S"): $(basename "${BASH_SOURCE[0]}") ${PARAMS}" >> "${LOG}"

    if [[ "$*" =~ "-s" ]]; then
        echo "BUILD SUCCESSFUL IN ${DURATION}" >> "${LOG}"
        if [[ ! ${IMAGE_ONLY} ]]; then
            FILE_LOCATION=$(web_link "${FILE_MOVE}")
            echo "FILE LINK: ${FILE_LOCATION}" >> "${LOG}"

            echo "${RED}FILE LOCATION: ${FILE_LOCATION}"
            case ${PACKAGE_METHOD} in
                "image")
                    echo "SIZE: $(du -h "${FILE_MOVE}/${BOOT_IMAGE}" |
                                      awk '{print $1}')${RST}" ;;
                "zip")
                    echo "SIZE: $(du -h "${FILE_MOVE}/${SIGNED_ZIP}" |
                                      awk '{print $1}')${RST}" ;;
            esac
        fi

        if [[ ${TG} ]]; then
            {
                echo "\`Kernel build successful in ${DURATION,,}\`"
                if [[ ! ${IMAGE_ONLY} ]]; then
                    echo
                    echo "[${FILE_LOCATION}](${FILE_LOCATION})"
                    if [[ -f ${SHORT_CHANGELOG} ]]; then
                        echo
                        echo "\`\`\`"
                        echo "Short changelog:"
                        cat "${SHORT_CHANGELOG}"
                        echo "\`\`\`"
                        mv "${SHORT_CHANGELOG}" "${SHORT_CHANGELOG}.bak"
                    fi
                fi
            } > ${TG_MSG_FILE}
            notify "$(cat ${TG_MSG_FILE})"
        fi
    else
        echo "BUILD FAILED IN ${DURATION}" >> "${LOG}"
        if [[ ${TG} ]]; then
            load_botinfo
            notify "\`Build failed in ${DURATION,,}\`"
        fi
    fi

    echo "${RED}DURATION: ${DURATION}${RST}"
    echo
    echo "\a"
    exit
}



################
#              #
# SCRIPT START #
#              #
################

# Source our universal functions script and macOS check
source common

# Start tracking time
START=$(date +"%s")

clear
echo "${RED}"
echo
echo "================================================================================================"
echo
echo
echo "  ___________________________________  __   ______ _______________________   ________________   "
echo "  ___  ____/__  /___    |_  ___/__  / / /   ___  //_/__  ____/__  __ \__  | / /__  ____/__  /   "
echo "  __  /_   __  / __  /| |____ \__  /_/ /    __  ,<  __  __/  __  /_/ /_   |/ /__  __/  __  /    "
echo "  _  __/   _  /___  ___ |___/ /_  __  /     _  /| | _  /___  _  _, _/_  /|  / _  /___  _  /___  "
echo "  /_/      /_____/_/  |_/____/ /_/ /_/      /_/ |_| /_____/  /_/ |_| /_/ |_/  /_____/  /_____/  "
echo
echo
echo
echo "================================================================================================"
echo


#################
# MAKING KERNEL #
#################

header "COMPILING KERNEL"

# Parse command line parameters and setup options
parse_parameters "$@"
device_flags
generate_variables

# Clean up the source
clean_up

# Generate variables such as versions
generate_version

# Print relevant variables
print_variables

# Build kernel
${BUILD_FUNCTION}

# After build tasks
after_build_tasks

# Print file info and time
ending_info -s
